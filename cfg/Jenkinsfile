def config;
node(){
    configFileProvider([configFile(fileId: params.CONFIG_ID, targetLocation: 'config')]) {
        config = readJSON file: 'config'
    }
}

pipeline {
            agent any
			options {
				skipDefaultCheckout(true)
			}

			tools{
				maven 'maven-default'
				dockerTool 'docker'
			}

            stages {
				stage('CleanWorkspace') {
                    steps {
						cleanWs()
                    }
                }
				stage('Checkout') {
                    steps {
						checkout scm
                    }
                }
                stage('UnitTest') {
                    steps {
						script {
							if("${config.enviroment}"=='develop' && !readFile('pom.xml').contains('SNAPSHOT')){
								currentBuild.result = 'FAILURE'
								error("No se encontró una versión SNAPSHOT.")
							}
						}
						sh 'mvn clean install'
                    }
                }
				stage('Build') {
                    steps {
						sh 'mvn -f pom.xml clean install -DskipTests'
                    }
                }
				stage('Publish'){
					environment {
						ARTIFACT_ID = readMavenPom().getArtifactId()
						ENV_SHORT = "${config.enviroment_short}"
					}
				}
				stage('Package'){
					environment {
						VERSION = readMavenPom().getVersion()
						ARTIFACT_ID = readMavenPom().getArtifactId()
						NAME = "${env.JOB_BASE_NAME}"
					}
					steps{
						withCredentials([azureServicePrincipal('user_azure')]) {
							sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
							sh 'TOKEN=$(az acr login --name acrhispam --expose-token --output tsv --query accessToken) && docker login acrhispam.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN'
							sh 'cp target/${ARTIFACT_ID}-${VERSION}.jar cfg/'
							sh 'docker build -t acrhispam.azurecr.io/${NAME}:${VERSION} --build-arg nombreArtefacto=${ARTIFACT_ID}-${VERSION}.jar cfg'
							sh 'docker inspect -f . acrhispam.azurecr.io/${NAME}:${VERSION}'
							sh 'docker tag acrhispam.azurecr.io/${NAME}:${VERSION} acrhispam.azurecr.io/${NAME}:latest'
							sh 'docker push acrhispam.azurecr.io/${NAME}:${VERSION}'
							sh 'docker push acrhispam.azurecr.io/${NAME}:latest'
							sh 'docker rmi acrhispam.azurecr.io/${NAME}:${VERSION} acrhispam.azurecr.io/${NAME}:latest'
							sh 'docker logout'
							sh 'az logout'
						}
					}
				}
				stage('Delivery'){
					environment {
						ARTIFACT_ID = readMavenPom().getArtifactId()
						AKS = "${config.aks}"
						RESOURCE_GROUP = "${config.resource_group}"
					}
					steps{
						withCredentials([azureServicePrincipal('user_azure')]) {
							sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
							sh 'az aks get-credentials --name ${AKS} --resource-group ${RESOURCE_GROUP} --admin --overwrite-existing'
							sh 'kubectl apply -f ./cfg/hispam-ms-${ARTIFACT_ID}-deployment.yml'
						}
					}
				}
            }
        }