<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <set-variable name="token" value="@{
            var to= context.Request.Headers.GetValueOrDefault("Authorization");
            return to;
            }" />
        <set-variable name="user" value="@{
            var to= context.Request.Headers.GetValueOrDefault("user");
            return to;
            }" />
        <send-request mode="new" response-variable-name="user-data" timeout="60" ignore-error="true">
            <set-url>@($"https://ms-personas-hispam-dev.azurewebsites.net/grants?module=SEL")</set-url>
            <set-method>GET</set-method>
            <set-header name="Authorization" exists-action="override">
                <value>@((string)context.Variables["token"])</value>
            </set-header>
        </send-request>
        <choose>
            <when condition="@(context.Variables["user-data"] == null || ((IResponse)context.Variables["user-data"]).StatusCode != 200)">
            <return-response>
                <set-status code="401" reason="Unauthorized" />
                <set-header name="WWW-Authenticate" exists-action="override">
                    <value>Bearer error="invalid_token"</value>
                </set-header>
            </return-response>
        </when>
        <when condition="@(context.Variables["user-data"] != null || ((IResponse)context.Variables["user-data"]).StatusCode == 200)">
        <set-header name="functions" exists-action="override">
            <value>@{
                var fun = ((IResponse)context.Variables["user-data"]).Body.As<JObject>(preserveContent: true)["functionsSTR"].ToString();
                var sin = fun.Replace("\r","").Replace("\n","").Replace("\t","").Replace("/\\/", "");
                return sin;
                }</value>
        </set-header>
        <set-header name="idUser" exists-action="override">
            <value>@{
                var fun = ((IResponse)context.Variables["user-data"]).Body.As<JObject>(preserveContent: true)["idUser"].ToString();
                return fun;
                }</value>
        </set-header>
        <set-header name="country" exists-action="override">
            <value>@{
                var fun = ((IResponse)context.Variables["user-data"]).Body.As<JObject>(preserveContent: true)["country"].ToString();
                return fun;
                }</value>
        </set-header>
        <set-header name="username" exists-action="override">
            <value>@{
                var fun = ((IResponse)context.Variables["user-data"]).Body.As<JObject>(preserveContent: true)["name"].ToString();
                return fun;
                }</value>
        </set-header>
        <set-header name="name" exists-action="override">
            <value>@{
                var fun = ((IResponse)context.Variables["user-data"]).Body.As<JObject>(preserveContent: true)["name"].ToString();
                return fun;
                }</value>
        </set-header>
        <set-header name="user" exists-action="override">
            <value>@((string)context.Variables["user"])</value>
        </set-header>
    </when>
</choose>
<base />
        </inbound>
<backend>
<base />
</backend>
<outbound>
<base />
</outbound>
<on-error>
<base />
</on-error>
        </policies>